
{% if product.metafields.custom.selected_variant == true or product.metafields.custom.selected_variant == null %}
<style>
  .hidden {
    display: none !important;
    opacity: 0;
  }
  [data-media-id], .media-item, .thumbnail, .product-media-container, .slideshow-slide, .media-gallery__grid li, .slideshow-controls__dots li {
    opacity: 1;
  }
  /* Hide all slides, dots, and thumbnails until initialized */
  .slideshow-slide, .slideshow-controls__dots li, .thumbnail, .dialog-thumbnails-list__thumbnail {
    display: none;
  }
  .media-gallery[data-variant-images-initialized="true"] .slideshow-slide,
  .media-gallery[data-variant-images-initialized="true"] .slideshow-controls__dots li,
  .media-gallery[data-variant-images-initialized="true"] .thumbnail,
  .media-gallery[data-variant-images-initialized="true"] .dialog-thumbnails-list__thumbnail {
    display: block;
  }
</style>
<script>
(function() {
  let productDataCache = null;
  let lastSelectedColor = null;

  function updateVariantImages(selectedColor, mediaItems, thumbnailButtons, sliders, gridItems, dotItems, mediaGallery) {
    const normalizedSelectedColor = selectedColor ? selectedColor.toLowerCase().replace(/\s+/g, '') : null;
    let foundMatchingImages = false;

    // Hide all images, thumbnails, grid items, and pagination dots
    mediaItems.forEach(mediaItem => {
      mediaItem.classList.add('hidden');
      const parentSlide = mediaItem.closest('slideshow-slide');
      if (parentSlide) parentSlide.classList.add('hidden');
    });
    thumbnailButtons.forEach(button => button.classList.add('hidden'));
    gridItems.forEach(gridItem => gridItem.classList.add('hidden'));
    dotItems.forEach(dot => dot.classList.add('hidden'));

    if (normalizedSelectedColor) {
      // Show only images, thumbnails, grid items, and dots matching the selected color
      mediaItems.forEach((mediaItem, index) => {
        const img = mediaItem.tagName === 'IMG' ? mediaItem : mediaItem.querySelector('img');
        if (img?.alt) {
          const altText = img.alt.toLowerCase().replace(/\s+/g, '');
          if (altText.includes(normalizedSelectedColor)) {
            mediaItem.classList.remove('hidden');
            const parentSlide = mediaItem.closest('slideshow-slide');
            if (parentSlide) {
              parentSlide.classList.remove('hidden');
              parentSlide.style.display = 'block'; // Ensure display is set
            }
            if (dotItems[index]) {
              dotItems[index].classList.remove('hidden');
              dotItems[index].style.display = 'block'; // Ensure display is set
              // Update aria-label to reflect correct slide count
              const visibleDots = dotItems.filter(dot => !dot.classList.contains('hidden')).length;
              dotItems[index].querySelector('button').setAttribute('aria-label', `Slide ${index + 1} of ${visibleDots}`);
            }
            foundMatchingImages = true;
          }
        }
      });
      thumbnailButtons.forEach(button => {
        const img = button.querySelector('img');
        if (img?.alt) {
          const altText = img.alt.toLowerCase().replace(/\s+/g, '');
          if (altText.includes(normalizedSelectedColor)) {
            button.classList.remove('hidden');
            button.style.display = 'block'; // Ensure display is set
          }
        }
      });
      gridItems.forEach(gridItem => {
        const img = gridItem.querySelector('img');
        if (img?.alt) {
          const altText = img.alt.toLowerCase().replace(/\s+/g, '');
          if (altText.includes(normalizedSelectedColor)) {
            gridItem.classList.remove('hidden');
          }
        }
      });
    }

    // Fallback: Show all if no matching images found or no color selected
    if (!normalizedSelectedColor || !foundMatchingImages || !productDataCache?.variants?.length > 1) {
      if (normalizedSelectedColor && !foundMatchingImages) {
        console.log(`Selected Variant Image: No images found for "${selectedColor}". Showing all images.`);
      }
      mediaItems.forEach((mediaItem, index) => {
        mediaItem.classList.remove('hidden');
        const parentSlide = mediaItem.closest('slideshow-slide');
        if (parentSlide) {
          parentSlide.classList.remove('hidden');
          parentSlide.style.display = 'block'; // Ensure display is set
        }
        if (dotItems[index]) {
          dotItems[index].classList.remove('hidden');
          dotItems[index].style.display = 'block'; // Ensure display is set
          // Update aria-label for all dots
          const visibleDots = dotItems.length;
          dotItems[index].querySelector('button').setAttribute('aria-label', `Slide ${index + 1} of ${visibleDots}`);
        }
      });
      thumbnailButtons.forEach(button => {
        button.classList.remove('hidden');
        button.style.display = 'block'; // Ensure display is set
      });
      gridItems.forEach(gridItem => gridItem.classList.remove('hidden'));
    }

    // Refresh sliders/galleries
    sliders.forEach(slider => {
      if (typeof slider.update === 'function') slider.update();
      else if (typeof slider.initPages === 'function') slider.initPages();
      else if (typeof slider.reset === 'function') slider.reset();
      else if (typeof window.Swiper !== 'undefined' && slider.swiper) {
        slider.swiper.update();
        slider.swiper.slideTo(0); // Reset to first slide
      } else {
        window.dispatchEvent(new Event('resize'));
      }
    });

    // Mark gallery as initialized to apply CSS display rules
    if (mediaGallery) {
      mediaGallery.setAttribute('data-variant-images-initialized', 'true');
    }
  }

  function initVariantImages() {
    const mediaGallery = document.querySelector('[data-product-media-gallery], media-gallery, .product__media, .product-media, .media-container, [data-product-media]');
    const productSection = document.querySelector('[data-product-id], .product-variant-id, .product-form, .product__form, [data-product-form], .product__info-container');
    
    if (!mediaGallery || !productSection) {
      console.error('Selected Variant Image: Required elements not found. Media Gallery:', !!mediaGallery, 'Product Section:', !!productSection);
      return;
    }

    const mediaItems = Array.from(mediaGallery.querySelectorAll('img, [data-media-id], .media-item, .product-media-item, slideshow-slide img, .product__media img'));
    const thumbnailButtons = Array.from(mediaGallery.querySelectorAll('.slideshow-controls__thumbnails button, .thumbnail, [data-thumbnail], .dialog-thumbnails-list__thumbnail'));
    const sliders = Array.from(mediaGallery.querySelectorAll('[data-slider], slider-component, .slider, .swiper, .carousel, .product-media-slider'));
    const gridItems = Array.from(mediaGallery.querySelectorAll('.media-gallery__grid li'));
    const dotItems = Array.from(mediaGallery.querySelectorAll('.slideshow-controls__dots li'));

    const showVariantImage = () => {
      if (!productDataCache) {
        console.warn('Selected Variant Image: Product data not yet loaded.');
        return;
      }

      let selectedColor = null;
      const hasMultipleVariants = productDataCache.variants && productDataCache.variants.length > 1;
      const variantSelects = document.querySelector('[data-variant-selects], variant-selects, .variant-picker, .product-form__variants, .product__variants, [data-product-variants], .product__variant-options');

      if (variantSelects && hasMultipleVariants) {
        const currentValues = Array.from(
          variantSelects.querySelectorAll('select option[selected], input:checked, [data-variant-option][aria-selected="true"], [data-variant-option].is-selected, [data-variant-option][class*="selected"]')
        ).map(el => el.value || el.getAttribute('data-variant-option') || el.textContent.trim());

        selectedColor = currentValues.find(value =>
          productDataCache.options.some(opt => opt.values.includes(value))
        );

        if (!selectedColor) {
          console.warn('Selected Variant Image: No matching option value found for current selection:', currentValues);
        }
      }

      if (selectedColor === lastSelectedColor) {
        return; // No change in relevant selection
      }

      lastSelectedColor = selectedColor;
      updateVariantImages(selectedColor, mediaItems, thumbnailButtons, sliders, gridItems, dotItems, mediaGallery);
    };

    if (productDataCache) {
      showVariantImage(); // Initial call if data is already there
    } else {
      const shopifyRoot = window.Shopify?.routes?.root || '/';
      const handle = `products/${"{{ product.handle }}"}.js`;
      fetch(`${shopifyRoot}${handle}`)
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
          return response.json();
        })
        .then(product => {
          productDataCache = product;
          showVariantImage(); // Call after data is fetched
          // Add event listeners after data is available
          productSection.removeEventListener('change', showVariantImage);
          productSection.removeEventListener('variant:change', showVariantImage);
          productSection.removeEventListener('shopify:variant:change', showVariantImage);
          productSection.removeEventListener('product:variant-updated', showVariantImage);
          productSection.addEventListener('change', showVariantImage);
          productSection.addEventListener('variant:change', showVariantImage);
          productSection.addEventListener('shopify:variant:change', showVariantImage);
          productSection.addEventListener('product:variant-updated', showVariantImage);
        })
        .catch(error => console.error("Selected Variant Image: Error fetching product data:", error));
    }
  }

  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    initVariantImages();
  } else {
    document.addEventListener('DOMContentLoaded', initVariantImages);
  }

  // Mutation observer for dynamic content
  const observerTarget = document.querySelector('[data-product-id]') || document.body;
  const observer = new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        const mediaGallery = document.querySelector('[data-product-media-gallery], media-gallery, .product__media, .product-media, .media-container, [data-product-media]');
        if (mediaGallery && !mediaGallery.hasAttribute('data-variant-images-initialized')) {
          mediaGallery.setAttribute('data-variant-images-initialized', 'true');
          initVariantImages();
          break;
        }
      }
    }
  });
  observer.observe(observerTarget, { childList: true, subtree: true });
})();
</script>
{% endif %}


{% # import schema from '../schemas/sections/product-information' %}


<div class="mobile-breadcrumbs-title hidden--desktop">
  {% render 'breadcrumbs', collection: collection %}

</div>


{% liquid
  if section.settings.desktop_media_position == 'left'
    assign render_order = 'media,product-details'
  else
    assign render_order = 'product-details,media'
  endif

  assign product_has_media = true
  if closest.product.media.size == 0
    assign product_has_media = false
  endif

  assign product_grid_class = 'product-information__grid'

  if product_has_media == false
    assign product_grid_class = product_grid_class | append: ' product-information--media-none'
  elsif section.settings.desktop_media_position == 'right'
    assign product_grid_class = product_grid_class | append: ' product-information--media-right'
  else
    assign product_grid_class = product_grid_class | append: ' product-information--media-left'
  endif

  if section.settings.equal_columns
    assign product_grid_class = product_grid_class | append: ' product-information__grid--half'

    if section.settings.limit_details_width
      assign product_grid_class = product_grid_class | append: ' product-information__grid--limit-details'
    endif
  endif

  case section.settings.content_width
    when 'content-center-aligned'
      assign content_width = 'page-width'
    when 'content-full-width'
      assign content_width = 'full-width'
  endcase
%}

<script type="application/ld+json">
  {{ closest.product | structured_data }}
</script>

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div
  class="product-information section section--{{ content_width }} spacing-style color-{{ section.settings.color_scheme }} relative"
  style="{% render 'spacing-style', settings: section.settings %} --gap: {{ section.settings.gap }}px;"
>
  {% if section.settings.desktop_media_position == 'left' and product_has_media %}
    {% assign product_href = '#ProductInformation-' | append: section.id %}
    {% render 'skip-to-content-link', href: product_href, text: 'accessibility.skip_to_product_info' %}
  {% endif %}
  <div
    class="{{ product_grid_class }}"
    data-product-grid-content
  >
    {% assign render_order_array = render_order | split: ',' %}
    {% capture media %}
      <div
        class="product-information__media"
        data-testid="product-information-media"
      >
        {%- content_for 'block',
          type: '_product-media-gallery',
          id: 'media-gallery',
          closest.product: closest.product
        -%}
      </div>
    {% endcapture %}

    {% capture details %}
      {% content_for 'block',
        type: '_product-details',
        id: 'product-details',
        closest.product: closest.product
      %}
    {% endcapture %}

    {% for block in render_order_array %}
      {% if block == 'media' and product_has_media %}
        {{ media }}
      {% elsif block == 'product-details' %}
        {{ details }}
      {% endif %}
    {% endfor %}
  </div>

  {% content_for 'blocks' %}
</div>

{% stylesheet %}
  .product-information {
    gap: var(--gap) 0;
  }

  /* Base grid layout */
  .product-information__grid {
    display: grid;
    grid-template-columns: subgrid;
    grid-column: 1 / -1;
  }

  /* Default column positions */
  .product-details {
    order: 1;
  }

  .product-information__media {
    order: 0;
    width: 0;
    min-width: 100%;
  }

  /* Mobile styles */
  @media screen and (max-width: 749px) {
    .product-information__media {
      grid-column: 1 / -1;
    }
    .product-details {
      grid-column: 2 / 3;
    }
  }

  /* Desktop styles */
  @media screen and (min-width: 750px) {
    .product-information__grid {
      grid-column: 2;
    }

    /* Position when there is no media */
    .product-information__grid.product-information--media-none,
    .product-information__grid:has(.product-information__media:empty) {
      .product-details {
        width: var(--narrow-content-width);
        margin: 0 auto;
      }
    }

    /* Position when there is media */
    .product-information__grid:not(:has(.product-information__media:empty)) {
      /* Media on the left side */
      &.product-information--media-left {
        grid-template-columns: 1fr min(50vw, var(--sidebar-width));

        .product-information__media {
          padding-right: calc(var(--gap, 0) / 2);
        }
        .product-details {
          padding-left: calc(var(--gap, 0) / 2);
        }

        &:has(.media-gallery--extend) {
          grid-column: 1 / 3;
        }
      }

      /* Media on the right side */
      &.product-information--media-right {
        grid-template-columns: min(50vw, var(--sidebar-width)) 1fr;

        .product-information__media {
          padding-left: calc(var(--gap, 0) / 2);
          order: 1;
        }
        .product-details {
          padding-right: calc(var(--gap, 0) / 2);
          order: 0;
        }

        &:has(.media-gallery--extend) {
          grid-column: 2 / -1;
        }
      }

      /* Equal width columns */
      &.product-information__grid--half,
      &.product-information__grid--half:has(.media-gallery--extend) {
        grid-column: 1 / -1;
        grid-template-columns:
          var(--full-page-grid-margin) calc(var(--full-page-grid-central-column-width) / 2) calc(
            var(--full-page-grid-central-column-width) / 2
          )
          var(--full-page-grid-margin);

        &.product-information--media-left {
          .product-information__media {
            grid-column: 2 / 3;
            &:has(.media-gallery--extend) {
              grid-column: 1 / 3;
            }
          }
          .product-details {
            grid-column: 3 / 4;
          }
        }

        &.product-information--media-right {
          .product-information__media {
            grid-column: 3 / 4;
            &:has(.media-gallery--extend) {
              grid-column: 3 / -1;
            }
          }
          .product-details {
            grid-column: 2 / 3;
          }
        }
      }
    }

    /* Handle full width section */
    .section--full-width {
      .product-information__grid:not(:has(.product-information__media:empty)),
      .product-information__grid:not(:has(.product-information__media:empty)) {
        &.product-information--media-left,
        &.product-information--media-right {
          grid-column: 1 / -1;
        }

        &.product-information--media-left .product-details {
          padding-inline-end: var(--padding-lg);
        }
        &.product-information--media-right .product-details {
          padding-inline-start: var(--padding-lg);
        }

        &.product-information__grid--half.product-information--media-left {
          .product-information__media {
            grid-column: 1 / 3;
          }
          .product-details {
            grid-column: 3 / -1;
          }
        }
        &.product-information__grid--half.product-information--media-right {
          .product-information__media {
            grid-column: 3 / -1;
          }
          .product-details {
            grid-column: 1 / 3;
          }
        }
      }
    }
  }

  .product-information__grid--limit-details .product-details > .group-block {
    max-width: var(--sidebar-width);
  }

  /* If the header is sticky, make product details content stick underneath the header */
  body:has(#header-group #header-component[data-sticky-state='active']) .product-details.sticky-content--desktop {
    --sticky-header-offset: var(--header-height);
  }
{% endstylesheet %}



{% schema %}
{
  "name": "t:names.product_information",
  "blocks": [
    {
      "type": "@app"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "header",
      "content": "t:content.layout"
    },
    {
      "type": "select",
      "id": "content_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "content-center-aligned",
          "label": "t:options.page"
        },
        {
          "value": "content-full-width",
          "label": "t:options.full"
        }
      ],
      "default": "content-center-aligned"
    },
    {
      "type": "select",
      "id": "desktop_media_position",
      "label": "t:settings.media_position",
      "options": [
        {
          "value": "left",
          "label": "t:options.left"
        },
        {
          "value": "right",
          "label": "t:options.right"
        }
      ],
      "default": "left"
    },
    {
      "type": "checkbox",
      "id": "equal_columns",
      "label": "t:settings.equal_columns",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "limit_details_width",
      "label": "t:settings.limit_product_details_width",
      "default": false,
      "visible_if": "{{ section.settings.equal_columns }}"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 48,
      "step": 4,
      "unit": "px",
      "default": 16
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": []
}
{% endschema %}