{% if product.metafields.custom.selected_variant == true or product.metafields.custom.selected_variant == null %}
  {% comment %} Create a JSON object with all variant metafield images {% endcomment %}
  {% capture all_variant_galleries %}
  {
    {% for variant in product.variants %}
      {% if variant.metafields.custom.variant_gallery.value %}
        "{{ variant.id }}": {{ variant.metafields.custom.variant_gallery.value | json }}{% unless forloop.last %},{% endunless %}
      {% endif %}
    {% endfor %}
  }
  {% endcapture %}
  
  {% if all_variant_galleries contains ':' %}
    <script id="AllVariantGalleriesJSON" type="application/json">
      {{ all_variant_galleries }}
    </script>
  {% endif %}

  <style>
    .hidden {
      display: none !important;
      opacity: 0;
    }
    [data-media-id], .media-item, .thumbnail, .product-media-container, .slideshow-slide, .media-gallery__grid li, .slideshow-controls__dots li {
      opacity: 1;
    }
    .media-gallery[data-variant-images-initialized="true"] .slideshow-slide,
    .media-gallery[data-variant-images-initialized="true"] .slideshow-controls__dots li,
    .media-gallery[data-variant-images-initialized="true"] .thumbnail,
    .media-gallery[data-variant-images-initialized="true"] .dialog-thumbnails-list__thumbnail {
      display: block;
    }
  </style>

  <script>
    (function() {
      let lastSelectedColor = null;
      const allVariantGalleriesJSON = document.getElementById('AllVariantGalleriesJSON');
      const allVariantGalleries = allVariantGalleriesJSON ? JSON.parse(allVariantGalleriesJSON.textContent) : {};

      function updateVariantImages(selectedColor, mediaGallery) {
        if (!mediaGallery) return;
        mediaGallery.innerHTML = '';

        // Get the currently selected variant ID
        const selectedVariantId = getSelectedVariantId();
        const variantGalleryImages = selectedVariantId && allVariantGalleries[selectedVariantId] ? allVariantGalleries[selectedVariantId] : null;

        if (!variantGalleryImages || variantGalleryImages.length === 0) {
          console.warn('No variant metafield images found for selected variant:', selectedVariantId);
          return;
        }

        variantGalleryImages.forEach((imageObj, index) => {
          const imageUrl = typeof imageObj === 'object' && imageObj.image ? imageObj.image : imageObj;
          const imageAlt = selectedColor ? selectedColor : `Variant Image ${index + 1}`;

          const wrapper = document.createElement('div');
          wrapper.className = 'product__media-item';
          wrapper.style.display = 'block';

          const img = document.createElement('img');
          img.src = imageUrl;
          img.alt = imageAlt;
          img.loading = 'lazy';

          wrapper.appendChild(img);
          mediaGallery.appendChild(wrapper);
        });

        mediaGallery.setAttribute('data-variant-images-initialized', 'true');
      }

      function getSelectedVariantId() {
        // Try to get selected variant ID from variant form input
        const variantIdInput = document.querySelector('input[name="id"], input[name="variant_id"], select[name="id"]');
        if (variantIdInput && variantIdInput.value) {
          return variantIdInput.value;
        }
        
        // Try to get from URL params
        const urlParams = new URLSearchParams(window.location.search);
        const variantFromUrl = urlParams.get('variant');
        if (variantFromUrl) {
          return variantFromUrl;
        }
        
        // Fallback to first available variant in our data
        const firstVariantId = Object.keys(allVariantGalleries)[0];
        return firstVariantId;
      }

      function initVariantImages() {
        const mediaGallery = document.querySelector('[data-product-media-gallery], media-gallery, .product__media, .product-media, .media-container, [data-product-media]');
        const productSection = document.querySelector('[data-product-id], .product-variant-id, .product-form, .product__form, [data-product-form], .product__info-container');

        if (!mediaGallery || !productSection) {
          console.error('Selected Variant Image: Required elements not found.');
          return;
        }

        const showVariantImage = () => {
          let selectedColor = null;
          const variantSelects = document.querySelector('[data-variant-selects], variant-selects, .variant-picker, .product-form__variants, .product__variants, [data-product-variants], .product__variant-options');

          if (variantSelects) {
            const currentValues = Array.from(
              variantSelects.querySelectorAll('select option[selected], input:checked, [data-variant-option][aria-selected="true"], [data-variant-option].is-selected, [data-variant-option][class*="selected"]')
            ).map(el => el.value || el.getAttribute('data-variant-option') || el.textContent.trim());

            selectedColor = currentValues.find(value => typeof value === 'string');
          }

          if (selectedColor === lastSelectedColor) return;
          lastSelectedColor = selectedColor;

          updateVariantImages(selectedColor, mediaGallery);
        };

        showVariantImage();

        productSection.addEventListener('change', showVariantImage);
        productSection.addEventListener('variant:change', showVariantImage);
        productSection.addEventListener('shopify:variant:change', showVariantImage);
        productSection.addEventListener('product:variant-updated', showVariantImage);
        
        // Listen for the theme's variant update event
        productSection.addEventListener('variant:update', showVariantImage);
      }

      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initVariantImages();
      } else {
        document.addEventListener('DOMContentLoaded', initVariantImages);
      }

      const observerTarget = document.querySelector('[data-product-id]') || document.body;
      const observer = new MutationObserver((mutationsList) => {
        for (const mutation of mutationsList) {
          if (mutation.type === 'childList') {
            const mediaGallery = document.querySelector('[data-product-media-gallery], media-gallery, .product__media, .product-media, .media-container, [data-product-media]');
            if (mediaGallery && !mediaGallery.hasAttribute('data-variant-images-initialized')) {
              mediaGallery.setAttribute('data-variant-images-initialized', 'true');
              initVariantImages();
              break;
            }
          }
        }
      });
      observer.observe(observerTarget, { childList: true, subtree: true });
      
      // Also listen globally for variant updates since the media gallery gets replaced
      document.addEventListener('variant:update', (event) => {
        setTimeout(() => {
          initVariantImages();
        }, 100);
      });
    })();
  </script>
{% endif %}
